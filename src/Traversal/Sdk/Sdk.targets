<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) Microsoft Corporation. All rights reserved.

  Licensed under the MIT license.
-->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(CustomBeforeTraversalTargets)" Condition=" '$(CustomBeforeTraversalTargets)' != '' And Exists('$(CustomBeforeTraversalTargets)') " />

  <PropertyGroup Condition=" '$(OutputPath)' == '' ">
    <!--
      OutputPath is required to be set because targets like Clean will read it.  Traversal projects shouldn't really emit any
      output but it could be hard to track down all of the places where $(OutputPath) and $(OutDir) are expected to be set.
    -->
    <OutputPath Condition=" '$(Configuration)' == '' And '$(Platform)' == '' ">bin\Debug\</OutputPath>
    <OutputPath Condition=" '$(Configuration)' != '' And '$(Platform)' == '' ">bin\$(Configuration)\</OutputPath>
    <OutputPath Condition=" '$(Configuration)' != '' And '$(Platform)' != '' ">bin\$(Configuration)\$(Platform)\</OutputPath>
  </PropertyGroup>

  <Import Project="$(MSBuildToolsPath)\Microsoft.Common.targets" Condition=" Exists('$(MSBuildToolsPath)\Microsoft.Common.targets') " />

  <ItemGroup>
    <ProjectReferenceTargets Remove="@(ProjectReferenceTargets)" />

    <ProjectReferenceTargets Include="Build" Targets=".default" />
    <ProjectReferenceTargets Include="Clean" Targets="Clean" />
    <ProjectReferenceTargets Include="Test" Targets="Test" />
    <ProjectReferenceTargets Include="VSTest" Targets="VSTest" />
    <ProjectReferenceTargets Include="Publish" Targets="Publish" />
    <ProjectReferenceTargets Include="Pack" Targets="Pack" />
  </ItemGroup>

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    <!--
      Set by Microsoft.Common.targets, some targets must be removed while others are left as standard extension mechanisms.
    -->
    <CoreBuildDependsOn>
      BuildOnlySettings;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      PostBuildEvent
    </CoreBuildDependsOn>

    <PrepareForBuildDependsOn></PrepareForBuildDependsOn>

    <ResolveReferencesDependsOn>
      BeforeResolveReferences;
      AfterResolveReferences
    </ResolveReferencesDependsOn>

    <TestDependsOn>
      Build
    </TestDependsOn>

    <VSTestDependsOn>
      Build
    </VSTestDependsOn>

    <CleanDependsOn>
      BeforeClean;
      UnmanagedUnregistration;
      CoreClean;
      PrepareProjectReferences;
      CleanPublishFolder;
      AfterClean
    </CleanDependsOn>

    <PackDependsOn>
      ResolveReferences;
    </PackDependsOn>

    <PublishDependsOn>
      Build;
    </PublishDependsOn>
  </PropertyGroup>

  <ItemGroup Condition=" '$(TraversalTranslateProjectFileItems)' != 'false' ">
    <!--
      Translate the ProjectFile items by moving them to ProjectReference items instead.
    -->
    <ProjectReference Include="@(ProjectFile)" />

    <ProjectFile Remove="@(ProjectFile)" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Update="@(ProjectReference)"
                      AdditionalProperties="$(TraversalGlobalProperties)" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TraversalRemoveCurrentProject)' != 'false' ">
    <!--
      Remove the dirs.proj in case the user accidentally included it through a glob like **\*.*proj.  Otherwise
      every user has to have an Exclude="$(MSBuildProjectFullPath)".
    -->
    <ProjectReference Remove="$(MSBuildProjectFullPath)" />
  </ItemGroup>

  <Target Name="PrepareForBuild"
          DependsOnTargets="$(PrepareForBuildDependsOn)" />

  <Target Name="Build"
          DependsOnTargets="$(BuildDependsOn)"
          Condition=" '$(IsGraphBuild)' != 'true' " >
    <MSBuild Projects="@(ProjectReference)"
             BuildInParallel="$(BuildInParallel)"
             SkipNonexistentProjects="$(SkipNonexistentProjects)"
             SkipNonexistentTargets="$(SkipNonexistentTargets)" />
  </Target>

  <Target Name="Clean"
          DependsOnTargets="$(CleanDependsOn)"
          Condition=" '$(IsGraphBuild)' != 'true' ">
    <MSBuild Projects="@(ProjectReference)"
             Targets="Clean"
             BuildInParallel="$(BuildInParallel)"
             SkipNonexistentProjects="$(SkipNonexistentProjects)"
             SkipNonexistentTargets="$(SkipNonexistentTargets)" />
  </Target>

  <Target Name="Test"
          DependsOnTargets="$(TestDependsOn)"
          Condition=" '$(IsGraphBuild)' != 'true' ">
    <MSBuild Projects="@(ProjectReference)"
             Targets="Test"
             BuildInParallel="$(BuildInParallel)"
             SkipNonexistentProjects="$(SkipNonexistentProjects)"
             SkipNonexistentTargets="$(SkipNonexistentTargets)" />
  </Target>

  <Target Name="VSTest"
          DependsOnTargets="$(VSTestDependsOn)"
          Condition=" '$(IsGraphBuild)' != 'true' ">
    <MSBuild Projects="@(ProjectReference)"
             Targets="VSTest"
             BuildInParallel="$(BuildInParallel)"
             SkipNonexistentProjects="$(SkipNonexistentProjects)"
             SkipNonexistentTargets="$(SkipNonexistentTargets)" />
  </Target>

  <Target Name="Pack"
          DependsOnTargets="$(PackDependsOn)"
          Condition=" '$(IsGraphBuild)' != 'true' ">
    <MSBuild Projects="@(ProjectReference)"
             Targets="Pack"
             BuildInParallel="$(BuildInParallel)"
             SkipNonexistentProjects="$(SkipNonexistentProjects)"
             SkipNonexistentTargets="$(SkipNonexistentTargets)" />
  </Target>

  <Target Name="Publish"
          DependsOnTargets="$(PublishDependsOn)"
          Condition=" '$(IsGraphBuild)' != 'true' ">
    <MSBuild Projects="@(ProjectReference)"
             Properties="$(TraversalPublishGlobalProperties)"
             Targets="Publish"
             BuildInParallel="$(BuildInParallel)"
             SkipNonexistentProjects="$(SkipNonexistentProjects)"
             SkipNonexistentTargets="$(SkipNonexistentTargets)" />
  </Target>

  <!--
    Traversal projects do not build anything and should not check for invalid configuration/platform.
  -->
  <Target Name="_CheckForInvalidConfigurationAndPlatform" />

  <Import Project="$(CustomAfterTraversalTargets)" Condition=" '$(CustomAfterTraversalTargets)' != '' And Exists('$(CustomAfterTraversalTargets)') " />
</Project>